D G "bit6" 0 21 "PIN_B5"
D G "__PCM__" 0 255 ""5.025""
D G "__DEVICE__" 0 255 "87"
D G "__DATE__" 0 255 ""13-lis-14""
D G "__TIME__" 0 255 ""18:48:42"" "Standard Header file for the PIC16F87 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
v L "value" 1 38 "int8" `54 
f B "set_tris_a" 1 38 "void(int8 value)" `53 
v L "value" 1 39 "int8" `56 
f B "set_tris_b" 1 39 "void(int8 value)" `55 
f B "get_tris_a" 1 40 "int8()" `57 
f B "get_tris_b" 1 41 "int8()" `58 
v L "value" 1 42 "int8" `60 
f B "output_a" 1 42 "void(int8 value)" `59 
v L "value" 1 43 "int8" `62 
f B "output_b" 1 43 "void(int8 value)" `61 
f B "input_a" 1 44 "int8()" `63 
f B "input_b" 1 45 "int8()" `64 
f B "input_change_a" 1 46 "int8()" `65 
f B "input_change_b" 1 47 "int8()" `66 
v L "pin" 1 48 "int16" `68 
f B "input" 1 48 "int8(int16 pin)" `67 
v L "pin" 1 49 "int16" `70 
f B "input_state" 1 49 "int8(int16 pin)" `69 
v L "pin" 1 50 "int16" `72 
f B "output_low" 1 50 "void(int16 pin)" `71 
v L "pin" 1 51 "int16" `74 
f B "output_high" 1 51 "void(int16 pin)" `73 
v L "pin" 1 52 "int16" `76 
f B "output_toggle" 1 52 "void(int16 pin)" `75 
v L "pin" 1 53 "int16" `78 
v L "level" 1 53 "int8" `79 
f B "output_bit" 1 53 "void(int16 pin,int8 level)" `77 
v L "pin" 1 54 "int16" `81 
f B "output_float" 1 54 "void(int16 pin)" `80 
v L "pin" 1 55 "int16" `83 
f B "output_drive" 1 55 "void(int16 pin)" `82  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 59 "40"
d G "PIN_A1" 1 60 "41"
d G "PIN_A2" 1 61 "42"
d G "PIN_A3" 1 62 "43"
d G "PIN_A4" 1 63 "44"
d G "PIN_A5" 1 64 "45"
d G "PIN_A6" 1 65 "46"
d G "PIN_A7" 1 66 "47"
d G "PIN_B0" 1 68 "48"
d G "PIN_B1" 1 69 "49"
d G "PIN_B2" 1 70 "50"
d G "PIN_B3" 1 71 "51"
d G "PIN_B4" 1 72 "52"
d G "PIN_B5" 1 73 "53"
d G "PIN_B6" 1 74 "54"
d G "PIN_B7" 1 75 "55"
d G "FALSE" 1 78 "0"
d G "TRUE" 1 79 "1"
d G "BYTE" 1 81 "int8"
d G "BOOLEAN" 1 82 "int1"
d G "getc" 1 84 "getch"
d G "fgetc" 1 85 "getch"
d G "getchar" 1 86 "getch"
d G "putc" 1 87 "putchar"
d G "fputc" 1 88 "putchar"
d G "fgets" 1 89 "gets"
d G "fputs" 1 90 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f B "restart_cause" 1 95 "int8()" `84 
f B "reset_cpu" 1 96 "void()" `85 
f B "sleep" 1 97 "void()" `86  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 99 "3"
d G "WDT_TIMEOUT" 1 100 "11"
d G "MCLR_FROM_SLEEP" 1 101 "19"
d G "MCLR_FROM_RUN" 1 102 "27"
d G "NORMAL_POWER_UP" 1 103 "25"
d G "BROWNOUT_RESTART" 1 104 "26"
c L "sleep" 1 3 5 "FUNCTION"
v L "mode" 1 111 "int8" `88 
f B "setup_timer_0" 1 111 "void(int8 mode)" `87 
v L "value" 1 112 "int8" `90 
f B "set_timer0" 1 112 "void(int8 value)" `89 
f B "get_timer0" 1 113 "int8()" `91 
v L "mode" 1 114 "int8" `93 
v L "prescaler" 1 114 "int8" `94 
f B "setup_counters" 1 114 "void(int8 mode,int8 prescaler)" `92 
v L "value" 1 115 "int8" `96 
f B "set_rtcc" 1 115 "void(int8 value)" `95 
f B "get_rtcc" 1 116 "int8()" `97  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 118 "0"
d G "T0_EXT_L_TO_H" 1 119 "32"
d G "T0_EXT_H_TO_L" 1 120 "48"
d G "T0_DIV_1" 1 122 "8"
d G "T0_DIV_2" 1 123 "0"
d G "T0_DIV_4" 1 124 "1"
d G "T0_DIV_8" 1 125 "2"
d G "T0_DIV_16" 1 126 "3"
d G "T0_DIV_32" 1 127 "4"
d G "T0_DIV_64" 1 128 "5"
d G "T0_DIV_128" 1 129 "6"
d G "T0_DIV_256" 1 130 "7"
d G "T0_8_BIT" 1 133 "0"
d G "RTCC_INTERNAL" 1 135 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 136 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 137 "48"
d G "RTCC_DIV_1" 1 138 "8"
d G "RTCC_DIV_2" 1 139 "0"
d G "RTCC_DIV_4" 1 140 "1"
d G "RTCC_DIV_8" 1 141 "2"
d G "RTCC_DIV_16" 1 142 "3"
d G "RTCC_DIV_32" 1 143 "4"
d G "RTCC_DIV_64" 1 144 "5"
d G "RTCC_DIV_128" 1 145 "6"
d G "RTCC_DIV_256" 1 146 "7"
d G "RTCC_8_BIT" 1 147 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
v L "mode" 1 158 "int16" `99 
f B "setup_wdt" 1 158 "void(int16 mode)" `98 
f B "restart_wdt" 1 159 "void()" `100  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 162 "8"
d G "WDT_36MS" 1 163 "9"
d G "WDT_72MS" 1 164 "10"
d G "WDT_144MS" 1 165 "11"
d G "WDT_288MS" 1 166 "12"
d G "WDT_576MS" 1 167 "13"
d G "WDT_1152MS" 1 168 "14"
d G "WDT_2304MS" 1 169 "15"
d G "WDT_ON" 1 174 "0x4000"
d G "WDT_OFF" 1 175 "0"
d G "WDT_DIV_16" 1 176 "0x100"
d G "WDT_DIV_8" 1 177 "0x300"
d G "WDT_DIV_4" 1 178 "0x500"
d G "WDT_DIV_2" 1 179 "0x700"
d G "WDT_TIMES_1" 1 180 "0x900" "Default"
d G "WDT_TIMES_2" 1 181 "0xB00"
d G "WDT_TIMES_4" 1 182 "0xD00"
d G "WDT_TIMES_8" 1 183 "0xF00"
d G "WDT_TIMES_16" 1 184 "0x1100"
d G "WDT_TIMES_32" 1 185 "0x1300"
d G "WDT_TIMES_64" 1 186 "0x1500"
d G "WDT_TIMES_128" 1 187 "0x1700"
c L "restart_wdt" 1 3 3 "FUNCTION"
v L "mode" 1 192 "int16" `102 
f B "setup_timer_1" 1 192 "void(int16 mode)" `101 
f B "get_timer1" 1 193 "int16()" `103 
v L "value" 1 194 "int16" `105 
f B "set_timer1" 1 194 "void(int16 value)" `104  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 197 "0"
d G "T1_INTERNAL" 1 198 "0x85"
d G "T1_EXTERNAL" 1 199 "0x87"
d G "T1_EXTERNAL_SYNC" 1 200 "0x83"
d G "T1_CLK_OUT" 1 202 "8"
d G "T1_DIV_BY_1" 1 204 "0"
d G "T1_DIV_BY_2" 1 205 "0x10"
d G "T1_DIV_BY_4" 1 206 "0x20"
d G "T1_DIV_BY_8" 1 207 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
v L "mode" 1 212 "int8" `107 
v L "period" 1 212 "int8" `108 
v L "postscale" 1 212 "int8" `109 
f B "setup_timer_2" 1 212 "void(int8 mode,int8 period,int8 postscale)" `106 
f B "get_timer2" 1 213 "int8()" `110 
v L "value" 1 214 "int8" `112 
f B "set_timer2" 1 214 "void(int8 value)" `111  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 216 "0"
d G "T2_DIV_BY_1" 1 217 "4"
d G "T2_DIV_BY_4" 1 218 "5"
d G "T2_DIV_BY_16" 1 219 "6"
c L "set_timer2" 1 3 4 "FUNCTION"
v L "mode" 1 225 "int32" `114 
f B "setup_ccp1" 1 225 "void(int32 mode)" `113 
v L "mode" 1 226 "int32" `116 
v L "pwm" 1 226 "int8" `117 
f G "setup_ccp1" 1 226 "void(int32 mode,int8 pwm)" `115 
v L "value" 1 227 "int16" `119 
f B "set_pwm1_duty" 1 227 "void(int16 value)" `118  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 229 "0"
d G "CCP_CAPTURE_FE" 1 230 "4"
d G "CCP_CAPTURE_RE" 1 231 "5"
d G "CCP_CAPTURE_DIV_4" 1 232 "6"
d G "CCP_CAPTURE_DIV_16" 1 233 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 234 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 235 "9"
d G "CCP_COMPARE_INT" 1 236 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 237 "0xB"
d G "CCP_PWM" 1 238 "0xC"
d G "CCP_PWM_PLUS_1" 1 239 "0x1c"
d G "CCP_PWM_PLUS_2" 1 240 "0x2c"
d G "CCP_PWM_PLUS_3" 1 241 "0x3c"
c L "set_pwm1_duty" 1 3 3 "FUNCTION"
v L "mode" 1 248 "int32" `124 
f B "setup_spi" 1 248 "void(int32 mode)" `123 
v L "value" 1 249 "int8" `126 
f B "spi_write" 1 249 "void(int8 value)" `125 
f B "spi_read" 1 250 "int8()" `127 
v L "value" 1 251 "int8" `129 
f G "spi_read" 1 251 "int8(int8 value)" `128 
f B "spi_data_in" 1 252 "int8()" `130  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 254 "0x00"
d G "SPI_MASTER" 1 255 "0x20"
d G "SPI_SLAVE" 1 256 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 257 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 258 "0x00"
d G "SPI_CLK_DIV_4" 1 259 "0x00"
d G "SPI_CLK_DIV_16" 1 260 "0x01"
d G "SPI_CLK_DIV_64" 1 261 "0x02"
d G "SPI_CLK_T2" 1 262 "0x03"
d G "SPI_SS_DISABLED" 1 263 "0x01"
d G "SPI_XMIT_L_TO_H" 1 265 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 266 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 268 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 269 "0x8000"
d G "SPI_L_TO_H" 1 272 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 273 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 3 2 "FUNCTION"
v L "baud" 1 277 "int32" `132 
f B "setup_uart" 1 277 "void(int32 baud)" `131 
v L "baud" 1 278 "int32" `134 
v L "stream" 1 278 "int8" `135 
f B "setup_uart" 1 278 "void(int32 baud,int8 stream)" `133 
v L "baud" 1 279 "int32" `137 
v L "stream" 1 279 "int8" `138 
v L "clock" 1 279 "int32" `139 
f G "setup_uart" 1 279 "void(int32 baud,int8 stream,int32 clock)" `136 
v L "baud" 1 280 "int32" `141 
f B "set_uart_speed" 1 280 "void(int32 baud)" `140 
v L "baud" 1 281 "int32" `143 
v L "stream" 1 281 "int8" `144 
f G "set_uart_speed" 1 281 "void(int32 baud,int8 stream)" `142 
v L "baud" 1 282 "int32" `146 
v L "stream" 1 282 "int8" `147 
v L "clock" 1 282 "int32" `148 
f B "set_uart_speed" 1 282 "void(int32 baud,int8 stream,int32 clock)" `145  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 286 "2"
d G "UART_DATA" 1 287 "4"
c L "set_uart_speed" 1 3 3 "FUNCTION"
v L "mode" 1 291 "int32" `150 
f B "setup_comparator" 1 291 "void(int32 mode)" `149  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 293 "0x0ff07"
d G "A0_A3_A1_A2" 1 294 "0xfff04"
d G "A0_A2_A1_A2" 1 295 "0x7ff03"
d G "A0_VR_A1_VR" 1 296 "0x3ff02"
d G "A3_VR_A2_VR" 1 297 "0xcff0a"
d G "A3_A2_A1_A2" 1 298 "0xeff0b"
d G "NC_NC_A1_A2" 1 299 "0x6ff05"
d G "A0_A2_A1_A2_OUT_ON_A3_A4" 1 300 "0x7e706"
c L "setup_comparator" 1 3 2 "FUNCTION"
v L "mode" 1 307 "int8" `154 
f B "setup_vref" 1 307 "void(int8 mode)" `153  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 309 "0xa0"
d G "VREF_HIGH" 1 310 "0x80"
d G "VREF_A2" 1 312 "0x40"
c L "setup_vref" 1 3 2 "FUNCTION"
v L "mode" 1 318 "int8" `156 
f B "setup_oscillator" 1 318 "int8(int8 mode)" `155 
v L "mode" 1 319 "int8" `158 
v L "tune" 1 319 "sint8" `159 
f B "setup_oscillator" 1 319 "int8(int8 mode,sint8 tune)" `157  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 321 "0"
d G "OSC_125KHZ" 1 322 "0x10"
d G "OSC_250KHZ" 1 323 "0x20"
d G "OSC_500KHZ" 1 324 "0x30"
d G "OSC_1MHZ" 1 325 "0x40"
d G "OSC_2MHZ" 1 326 "0x50"
d G "OSC_4MHZ" 1 327 "0x60"
d G "OSC_8MHZ" 1 328 "0x70"
d G "OSC_TIMER1" 1 330 "1"
d G "OSC_INTRC" 1 331 "2"
d G "OSC_NORMAL" 1 332 "0"
d G "OSC_STATE_STABLE" 1 336 "4"
d G "OSC_STATE_EXT_RUNNING" 1 337 "8"
c L "setup_oscillator" 1 3 3 "FUNCTION"
v L "x" 1 344 "sint8" `161 
f B "abs" 1 344 "sint8(sint8 x)" `160 
v L "x" 1 345 "sint16" `163 
f G "abs" 1 345 "sint16(sint16 x)" `162 
v L "x" 1 346 "sint32" `165 
f G "abs" 1 346 "sint32(sint32 x)" `164 
v L "x" 1 347 "float" `167 
f G "abs" 1 347 "float(float x)" `166 
v L "??65535" 1 348 "int8" `169 
v L "??65535" 1 348 "int8" `170 
f B "_mul" 1 348 "int16(int8 ,int8 )" `168 
v L "??65535" 1 349 "sint8" `169 
v L "??65535" 1 349 "sint8" `173 
f B "_mul" 1 349 "sint16(sint8 ,sint8 )" `171 
v L "??65535" 1 350 "int16" `169 
v L "??65535" 1 350 "int16" `176 
f B "_mul" 1 350 "int32(int16 ,int16 )" `174 
v L "??65535" 1 351 "sint16" `169 
v L "??65535" 1 351 "sint16" `179 
f G "_mul" 1 351 "sint32(sint16 ,sint16 )" `177  "Memory Manipulation Prototypes:"
v L "bank" 1 354 "int8" `181 
v L "offset" 1 354 "int8" `182 
f B "read_bank" 1 354 "int8(int8 bank,int8 offset)" `180 
v L "bank" 1 355 "int8" `184 
v L "offset" 1 355 "int8" `185 
v L "value" 1 355 "int8" `186 
f B "write_bank" 1 355 "void(int8 bank,int8 offset,int8 value)" `183 
v L "dest" 1 356 "*int8" `188 
v L "src" 1 356 "*int8" `189 
f B "strcpy" 1 356 "void(*int8 dest,*int8 src)" `187 
v L "dest" 1 357 "*int8" `191 
v L "src" 1 357 "*int8" `192 
f B "strcopy" 1 357 "void(*int8 dest,*int8 src)" `190 
v L "destination" 1 358 "*int8" `194 
v L "value" 1 358 "int8" `195 
v L "num" 1 358 "int16" `196 
f B "memset" 1 358 "void(*int8 destination,int8 value,int16 num)" `193 
v L "destination" 1 359 "*int8" `198 
v L "source" 1 359 "*int8" `199 
v L "num" 1 359 "int16" `200 
f B "memcpy" 1 359 "void(*int8 destination,*int8 source,int16 num)" `197  "String Prototypes:"
v L "cvalue" 1 362 "int8" `202 
f B "toupper" 1 362 "int8(int8 cvalue)" `201 
v L "cvalue" 1 363 "int8" `204 
f B "tolower" 1 363 "int8(int8 cvalue)" `203 
v L "string" 1 364 "*int8" `206 
v L "cstring" 1 364 "*int8" `207 
f B "sprintf" 1 364 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `205  "Data Manipulators Prototypes:"
v L "address" 1 367 "*int8" `210 
v L "bytes" 1 367 "int8" `211 
v L "value" 1 367 "int8" `212 
f B "shift_left" 1 367 "int8(*int8 address,int8 bytes,int8 value)" `209 
v L "address" 1 368 "*int8" `214 
v L "bytes" 1 368 "int8" `215 
v L "value" 1 368 "int8" `216 
f B "shift_right" 1 368 "int8(*int8 address,int8 bytes,int8 value)" `213 
v L "address" 1 369 "*int8" `218 
v L "bytes" 1 369 "int8" `219 
f B "rotate_left" 1 369 "void(*int8 address,int8 bytes)" `217 
v L "address" 1 370 "*int8" `221 
v L "bytes" 1 370 "int8" `222 
f B "rotate_right" 1 370 "void(*int8 address,int8 bytes)" `220 
v L "value" 1 371 "int8" `224 
f B "swap" 1 371 "void(int8 value)" `223 
v L "var" 1 372 "int16" `226 
v L "offset" 1 372 "int8" `227 
f B "make8" 1 372 "int8(int16 var,int8 offset)" `225 
v L "var" 1 373 "int32" `226 
v L "offset" 1 373 "int8" `230 
f G "make8" 1 373 "int8(int32 var,int8 offset)" `228 
v L "varhigh" 1 374 "int8" `232 
v L "varlow" 1 374 "int8" `233 
f B "make16" 1 374 "int16(int8 varhigh,int8 varlow)" `231 
v L "var1" 1 375 "int16" `235 
f B "make32" 1 375 "int32(int16 var1)" `234 
v L "var1" 1 376 "int16" `237 
v L "var2" 1 376 "int16" `238 
f G "make32" 1 376 "int32(int16 var1,int16 var2)" `236 
v L "var1" 1 377 "int16" `237 
v L "var2" 1 377 "int8" `241 
f G "make32" 1 377 "int32(int16 var1,int8 var2)" `239 
v L "var1" 1 378 "int16" `243 
v L "var2" 1 378 "int8" `244 
v L "var3" 1 378 "int8" `245 
f B "make32" 1 378 "int32(int16 var1,int8 var2,int8 var3)" `242 
v L "var1" 1 379 "int8" `247 
f G "make32" 1 379 "int32(int8 var1)" `246 
v L "var1" 1 380 "int8" `237 
v L "var2" 1 380 "int8" `250 
f G "make32" 1 380 "int32(int8 var1,int8 var2)" `248 
v L "var1" 1 381 "int8" `243 
v L "var2" 1 381 "int8" `244 
v L "var3" 1 381 "int8" `254 
f G "make32" 1 381 "int32(int8 var1,int8 var2,int8 var3)" `251 
v L "var1" 1 382 "int8" `256 
v L "var2" 1 382 "int8" `257 
v L "var3" 1 382 "int8" `258 
v L "var4" 1 382 "int8" `259 
f G "make32" 1 382 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `255 
v L "var1" 1 383 "int8" `237 
v L "var2" 1 383 "int16" `262 
f G "make32" 1 383 "int32(int8 var1,int16 var2)" `260 
v L "var1" 1 384 "int8" `243 
v L "var2" 1 384 "int16" `244 
v L "var3" 1 384 "int8" `266 
f G "make32" 1 384 "int32(int8 var1,int16 var2,int8 var3)" `263 
v L "var1" 1 385 "int8" `243 
v L "var2" 1 385 "int8" `244 
v L "var3" 1 385 "int16" `270 
f G "make32" 1 385 "int32(int8 var1,int8 var2,int16 var3)" `267 
v L "var" 1 386 "int8" `272 
v L "bit" 1 386 "int8" `273 
f B "bit_set" 1 386 "void(int8 var,int8 bit)" `271 
v L "var" 1 387 "int16" `272 
v L "bit" 1 387 "int8" `276 
f G "bit_set" 1 387 "void(int16 var,int8 bit)" `274 
v L "var" 1 388 "int32" `272 
v L "bit" 1 388 "int8" `279 
f G "bit_set" 1 388 "void(int32 var,int8 bit)" `277 
v L "var" 1 389 "int8" `281 
v L "bit" 1 389 "int8" `282 
f B "bit_clear" 1 389 "void(int8 var,int8 bit)" `280 
v L "var" 1 390 "int16" `281 
v L "bit" 1 390 "int8" `285 
f G "bit_clear" 1 390 "void(int16 var,int8 bit)" `283 
v L "var" 1 391 "int32" `281 
v L "bit" 1 391 "int8" `288 
f G "bit_clear" 1 391 "void(int32 var,int8 bit)" `286 
v L "var" 1 392 "int8" `290 
v L "bit" 1 392 "int8" `291 
f B "bit_test" 1 392 "int8(int8 var,int8 bit)" `289 
v L "var" 1 393 "int16" `290 
v L "bit" 1 393 "int8" `294 
f G "bit_test" 1 393 "int8(int16 var,int8 bit)" `292 
v L "var" 1 394 "int32" `290 
v L "bit" 1 394 "int8" `297 
f G "bit_test" 1 394 "int8(int32 var,int8 bit)" `295  "#use delay() Prototypes:"
v L "count" 1 397 "int8" `299 
f B "delay_cycles" 1 397 "void(int8 count)" `298 
v L "time" 1 398 "int16" `301 
f B "delay_ms" 1 398 "void(int16 time)" `300 
v L "time" 1 399 "int16" `303 
f B "delay_us" 1 399 "void(int16 time)" `302  "#use rs232() Prototypes:"
v L "cdata" 1 402 "int8" `305 
f B "putchar" 1 402 "void(int8 cdata)" `304 
v L "cdata" 1 403 "int8" `307 
v L "stream" 1 403 "int8" `308 
f G "putchar" 1 403 "void(int8 cdata,int8 stream)" `306 
v L "string" 1 404 "*int8" `310 
f B "puts" 1 404 "void(*int8 string)" `309 
v L "string" 1 405 "*int8" `312 
v L "stream" 1 405 "int8" `313 
f G "puts" 1 405 "void(*int8 string,int8 stream)" `311 
f B "getch" 1 406 "int8()" `314 
v L "stream" 1 407 "int8" `316 
f G "getch" 1 407 "int8(int8 stream)" `315 
v L "string" 1 408 "*int8" `318 
f B "gets" 1 408 "void(*int8 string)" `317 
v L "string" 1 409 "*int8" `320 
v L "stream" 1 409 "int8" `321 
f G "gets" 1 409 "void(*int8 string,int8 stream)" `319 
f B "kbhit" 1 410 "int8()" `322 
v L "stream" 1 411 "int8" `324 
f G "kbhit" 1 411 "int8(int8 stream)" `323 
v L "string" 1 412 "*int8" `326 
f B "printf" 1 412 "void(*int8 string,*int8 _VA_LIST)" `325 
v L "stream" 1 413 "int8" `329 
v L "string" 1 413 "*int8" `330 
f B "fprintf" 1 413 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `328 
f B "putc_send" 1 414 "void()" `332 
v L "stream" 1 415 "int8" `334 
f B "fputc_send" 1 415 "void(int8 stream)" `333 
f B "rcv_buffer_full" 1 416 "int8()" `335 
v L "stream" 1 417 "int8" `337 
f G "rcv_buffer_full" 1 417 "int8(int8 stream)" `336 
f B "rcv_buffer_bytes" 1 418 "int16()" `338 
v L "stream" 1 419 "int8" `340 
f G "rcv_buffer_bytes" 1 419 "int16(int8 stream)" `339 
f B "tx_buffer_full" 1 420 "int8()" `341 
v L "stream" 1 421 "int8" `343 
f G "tx_buffer_full" 1 421 "int8(int8 stream)" `342 
f B "tx_buffer_bytes" 1 422 "int16()" `344 
v L "stream" 1 423 "int8" `346 
f G "tx_buffer_bytes" 1 423 "int16(int8 stream)" `345  "#use i2c() Prototypes:"
f B "i2c_read" 1 426 "int8()" `347 
v L "stream" 1 427 "int8" `349 
f G "i2c_read" 1 427 "int8(int8 stream)" `348 
v L "stream" 1 428 "int8" `351 
v L "ack" 1 428 "int8" `352 
f G "i2c_read" 1 428 "int8(int8 stream,int8 ack)" `350 
v L "data" 1 429 "int8" `354 
f B "i2c_write" 1 429 "int8(int8 data)" `353 
v L "stream" 1 430 "int8" `356 
v L "data" 1 430 "int8" `357 
f G "i2c_write" 1 430 "int8(int8 stream,int8 data)" `355 
f B "i2c_start" 1 431 "void()" `358 
v L "stream" 1 432 "int8" `360 
f G "i2c_start" 1 432 "void(int8 stream)" `359 
v L "stream" 1 433 "int8" `362 
v L "restart" 1 433 "int8" `363 
f G "i2c_start" 1 433 "void(int8 stream,int8 restart)" `361 
f B "i2c_stop" 1 434 "void()" `364 
v L "stream" 1 435 "int8" `366 
f B "i2c_stop" 1 435 "void(int8 stream)" `365 
f B "i2c_isr_state" 1 436 "int8()" `367 
v L "addr" 1 437 "int8" `369 
f B "i2c_slaveaddr" 1 437 "void(int8 addr)" `368 
v L "stream" 1 438 "int8" `371 
v L "addr" 1 438 "int8" `372 
f G "i2c_slaveaddr" 1 438 "void(int8 stream,int8 addr)" `370 
f B "i2c_poll" 1 439 "int8()" `373 
v L "stream" 1 440 "int8" `375 
f G "i2c_poll" 1 440 "int8(int8 stream)" `374 
v L "baud" 1 441 "int32" `377 
f B "i2c_init" 1 441 "void(int32 baud)" `376 
v L "stream" 1 442 "int8" `379 
v L "baud" 1 442 "int32" `380 
f G "i2c_init" 1 442 "void(int8 stream,int32 baud)" `378  "#use spi() Prototypes:"
f B "spi_xfer" 1 445 "int8()" `381 
f G "spi_xfer" 1 446 "int16()" `382 
f G "spi_xfer" 1 447 "int32()" `383 
v L "data" 1 448 "int8" `385 
f G "spi_xfer" 1 448 "int8(int8 data)" `384 
v L "data" 1 449 "int16" `387 
f G "spi_xfer" 1 449 "int16(int16 data)" `386 
v L "data" 1 450 "int32" `389 
f G "spi_xfer" 1 450 "int32(int32 data)" `388 
v L "stream" 1 451 "int8" `391 
v L "data" 1 451 "int8" `392 
f G "spi_xfer" 1 451 "int8(int8 stream,int8 data)" `390 
v L "stream" 1 452 "int8" `391 
v L "data" 1 452 "int16" `395 
f G "spi_xfer" 1 452 "int16(int8 stream,int16 data)" `393 
v L "stream" 1 453 "int8" `391 
v L "data" 1 453 "int32" `398 
f G "spi_xfer" 1 453 "int32(int8 stream,int32 data)" `396 
v L "stream" 1 454 "int8" `400 
v L "data" 1 454 "int8" `401 
v L "bits" 1 454 "int8" `402 
f B "spi_xfer" 1 454 "int8(int8 stream,int8 data,int8 bits)" `399 
v L "stream" 1 455 "int8" `400 
v L "data" 1 455 "int16" `401 
v L "bits" 1 455 "int8" `406 
f G "spi_xfer" 1 455 "int16(int8 stream,int16 data,int8 bits)" `403 
v L "stream" 1 456 "int8" `400 
v L "data" 1 456 "int32" `401 
v L "bits" 1 456 "int8" `410 
f B "spi_xfer" 1 456 "int32(int8 stream,int32 data,int8 bits)" `407 
v L "baud" 1 457 "int32" `412 
f B "spi_init" 1 457 "void(int32 baud)" `411 
v L "stream" 1 458 "int8" `414 
v L "baud" 1 458 "int32" `415 
f G "spi_init" 1 458 "void(int8 stream,int32 baud)" `413 
v L "baud" 1 459 "int32" `417 
f B "spi_speed" 1 459 "void(int32 baud)" `416 
v L "stream" 1 460 "int8" `419 
v L "baud" 1 460 "int32" `420 
f B "spi_speed" 1 460 "void(int8 stream,int32 baud)" `418 
v L "stream" 1 461 "int8" `422 
v L "baud" 1 461 "int32" `423 
v L "clock" 1 461 "int32" `424 
f B "spi_speed" 1 461 "void(int8 stream,int32 baud,int32 clock)" `421 
v L "data" 1 462 "int8" `426 
f B "spi_prewrite" 1 462 "void(int8 data)" `425 
v L "data" 1 463 "int16" `428 
f G "spi_prewrite" 1 463 "void(int16 data)" `427 
v L "data" 1 464 "int32" `430 
f G "spi_prewrite" 1 464 "void(int32 data)" `429 
v L "??65535" 1 465 "int8" `432 
v L "data" 1 465 "int8" `433 
f G "spi_prewrite" 1 465 "void(int8 ,int8 data)" `431 
v L "??65535" 1 466 "int8" `432 
v L "data" 1 466 "int16" `436 
f G "spi_prewrite" 1 466 "void(int8 ,int16 data)" `434 
v L "??65535" 1 467 "int8" `432 
v L "data" 1 467 "int32" `439 
f G "spi_prewrite" 1 467 "void(int8 ,int32 data)" `437 
f B "spi_xfer_in" 1 468 "int8()" `440 
f G "spi_xfer_in" 1 469 "int16()" `441 
f G "spi_xfer_in" 1 470 "int32()" `442 
v L "bits" 1 471 "int8" `444 
f G "spi_xfer_in" 1 471 "int8(int8 bits)" `443 
v L "bits" 1 472 "int8" `446 
f B "spi_xfer_in" 1 472 "int16(int8 bits)" `445 
v L "bits" 1 473 "int8" `448 
f G "spi_xfer_in" 1 473 "int32(int8 bits)" `447 
v L "stream" 1 474 "int8" `450 
v L "bits" 1 474 "int8" `451 
f G "spi_xfer_in" 1 474 "int8(int8 stream,int8 bits)" `449 
v L "stream" 1 475 "int8" `450 
v L "bits" 1 475 "int8" `454 
f G "spi_xfer_in" 1 475 "int16(int8 stream,int8 bits)" `452 
v L "stream" 1 476 "int8" `450 
v L "bits" 1 476 "int8" `457 
f G "spi_xfer_in" 1 476 "int32(int8 stream,int8 bits)" `455  "#use rtos() Prototypes:"
f B "rtos_run" 1 479 "void()" `458 
f B "rtos_yield" 1 480 "void()" `459 
v L "task" 1 481 "int8" `461 
f B "rtos_enable" 1 481 "void(int8 task)" `460 
v L "task" 1 482 "int8" `463 
f B "rtos_disable" 1 482 "void(int8 task)" `462 
f B "rtos_terminate" 1 483 "void()" `464 
v L "flag" 1 484 "int8" `466 
f B "rtos_await" 1 484 "void(int8 flag)" `465 
v L "sem" 1 485 "int8" `468 
f B "rtos_wait" 1 485 "void(int8 sem)" `467 
v L "sem" 1 486 "int8" `470 
f B "rtos_signal" 1 486 "void(int8 sem)" `469 
v L "task" 1 487 "int8" `472 
v L "msg" 1 487 "int8" `473 
f B "rtos_msg_send" 1 487 "void(int8 task,int8 msg)" `471 
f B "rtos_msg_read" 1 488 "int8()" `474 
f B "rtos_msg_poll" 1 489 "int8()" `475 
v L "task" 1 490 "int8" `477 
f B "rtos_overrun" 1 490 "int8(int8 task)" `476 
v L "task" 1 491 "int8" `479 
v L "stat" 1 491 "*int8" `480 
f B "rtos_stats" 1 491 "void(int8 task,*int8 stat)" `478  "#use timer() Prototypes:"
f B "get_ticks" 1 494 "int8()" `481 
f B "get_ticks" 1 495 "int16()" `482 
f G "get_ticks" 1 496 "int32()" `483 
v L "stream" 1 497 "int8" `485 
f B "get_ticks" 1 497 "int8(int8 stream)" `484 
v L "stream" 1 498 "int8" `487 
f B "get_ticks" 1 498 "int16(int8 stream)" `486 
v L "stream" 1 499 "int8" `489 
f B "get_ticks" 1 499 "int32(int8 stream)" `488 
v L "value" 1 500 "int8" `491 
f B "set_ticks" 1 500 "void(int8 value)" `490 
v L "value" 1 501 "int16" `493 
f B "set_ticks" 1 501 "void(int16 value)" `492 
v L "value" 1 502 "int32" `495 
f G "set_ticks" 1 502 "void(int32 value)" `494 
v L "stream" 1 503 "int8" `497 
v L "value" 1 503 "int8" `498 
f G "set_ticks" 1 503 "void(int8 stream,int8 value)" `496 
v L "stream" 1 504 "int8" `497 
v L "value" 1 504 "int16" `501 
f G "set_ticks" 1 504 "void(int8 stream,int16 value)" `499 
v L "stream" 1 505 "int8" `497 
v L "value" 1 505 "int32" `504 
f G "set_ticks" 1 505 "void(int8 stream,int32 value)" `502  "#use pwm() Prototypes:"
f B "pwm_on" 1 508 "void()" `505 
v L "stream" 1 509 "int8" `507 
f G "pwm_on" 1 509 "void(int8 stream)" `506 
f B "pwm_off" 1 510 "void()" `508 
v L "stream" 1 511 "int8" `510 
f G "pwm_off" 1 511 "void(int8 stream)" `509 
v L "duty" 1 512 "int16" `512 
f B "pwm_set_duty" 1 512 "void(int16 duty)" `511 
v L "stream" 1 513 "int8" `514 
v L "duty" 1 513 "int16" `515 
f G "pwm_set_duty" 1 513 "void(int8 stream,int16 duty)" `513 
v L "percent" 1 514 "int16" `517 
f B "pwm_set_duty_percent" 1 514 "void(int16 percent)" `516 
v L "stream" 1 515 "int8" `519 
v L "percent" 1 515 "int16" `520 
f G "pwm_set_duty_percent" 1 515 "void(int8 stream,int16 percent)" `518 
v L "frequency" 1 516 "int32" `522 
f B "pwm_set_frequency" 1 516 "void(int32 frequency)" `521 
v L "stream" 1 517 "int8" `524 
v L "frequency" 1 517 "int32" `525 
f G "pwm_set_frequency" 1 517 "void(int8 stream,int32 frequency)" `523  "#use capture() Prototypes:"
f B "get_capture_time" 1 520 "int16()" `526 
v L "stream" 1 521 "int8" `528 
f G "get_capture_time" 1 521 "int16(int8 stream)" `527 
f B "get_capture_event" 1 522 "int8()" `529 
v L "stream" 1 523 "int8" `531 
f G "get_capture_event" 1 523 "int8(int8 stream)" `530  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 536 "int16" `533 
f B "goto_address" 1 536 "void(int16 address)" `532 
v L "label" 1 537 "int16" `535 
f B "label_address" 1 537 "int16(int16 label)" `534  "Program Memory Prototypes:"
v L "address" 1 540 "int16" `537 
v L "dataptr" 1 540 "*int8" `538 
v L "count" 1 540 "int16" `539 
f B "read_program_memory" 1 540 "void(int16 address,*int8 dataptr,int16 count)" `536 
v L "address" 1 541 "int16" `541 
f B "read_program_eeprom" 1 541 "int16(int16 address)" `540 
v L "address" 1 542 "int16" `543 
f B "erase_program_eeprom" 1 542 "void(int16 address)" `542 
v L "address" 1 543 "int16" `545 
v L "dataptr" 1 543 "*int8" `546 
v L "count" 1 543 "int16" `547 
f B "write_program_memory" 1 543 "void(int16 address,*int8 dataptr,int16 count)" `544 
v L "address" 1 544 "int16" `549 
v L "data" 1 544 "int16" `550 
f B "write_program_eeprom" 1 544 "void(int16 address,int16 data)" `548  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 549 "int16" `551 
v L "address" 1 554 "__EEADDRESS__" `553 
f B "read_eeprom" 1 554 "int8(__EEADDRESS__ address)" `552 
v L "address" 1 555 "__EEADDRESS__" `555 
v L "value" 1 555 "int8" `556 
f B "write_eeprom" 1 555 "void(__EEADDRESS__ address,int8 value)" `554  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
v L "interrupt" 1 562 "int32" `558 
f B "enable_interrupts" 1 562 "void(int32 interrupt)" `557 
v L "interrupt" 1 563 "int32" `560 
f B "disable_interrupts" 1 563 "void(int32 interrupt)" `559 
v L "interrupt" 1 564 "int32" `562 
f B "clear_interrupt" 1 564 "void(int32 interrupt)" `561 
v L "interrupt" 1 565 "int32" `564 
f B "interrupt_active" 1 565 "int8(int32 interrupt)" `563 
v L "interrupt" 1 566 "int32" `566 
f B "interrupt_enabled" 1 566 "int8(int32 interrupt)" `565 
v L "source" 1 567 "int8" `568 
v L "edge" 1 567 "int8" `569 
f B "ext_int_edge" 1 567 "void(int8 source,int8 edge)" `567 
v L "address" 1 568 "int16" `571 
f B "jump_to_irs" 1 568 "void(int16 address)" `570  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 570 "0x40"
d G "H_TO_L" 1 571 "0"
d G "GLOBAL" 1 573 "0x0BC0"
d G "PERIPH" 1 574 "0x0B40"
d G "INT_RTCC" 1 575 "0x000B20"
d G "INT_RB" 1 576 "0x00FF0B08"
d G "INT_EXT_L2H" 1 577 "0x50000B10"
d G "INT_EXT_H2L" 1 578 "0x60000B10"
d G "INT_EXT" 1 579 "0x000B10"
d G "INT_TBE" 1 580 "0x008C10"
d G "INT_RDA" 1 581 "0x008C20"
d G "INT_TIMER1" 1 582 "0x008C01"
d G "INT_TIMER2" 1 583 "0x008C02"
d G "INT_CCP1" 1 584 "0x008C04"
d G "INT_SSP" 1 585 "0x008C08"
d G "INT_EEPROM" 1 586 "0x008D10"
d G "INT_TIMER0" 1 587 "0x000B20"
d G "INT_COMP" 1 588 "0x008D40"
d G "INT_OSC_FAIL" 1 589 "0x008D80"
C L "jump_to_irs" 0 3 1 "FUNCTION"
C L "jump_to_irs" 2 1 1 "FUNCTION"
V L "val" 2 2 "int8" `577 
F G "decToBcd" 2 3 "int8(int8 val)" `576 
C L "bcdToDec" 2 1 1 "FUNCTION"
V L "val" 2 8 "int8" `582 
F G "bcdToDec" 2 9 "int8(int8 val)" `581 
D G "DS1307_SDA" 3 6 "PIN_B1"
D G "DS1307_SCL" 3 7 "PIN_B4"
C L "init_DS1307" 3 1 1 "FUNCTION"
F G "init_DS1307" 3 15 "void()" `590 
C L "write_DS1307" 3 1 2 "FUNCTION"
V L "address" 3 23 "int8" `592 
V L "data" 3 23 "int8" `593 
F G "write_DS1307" 3 24 "void(int8 address,int8 data)" `591 
V L "status" 3 25 "int1" `594 
V L "x" 3 26 "int8" `595 
C L "read_DS1307" 3 1 1 "FUNCTION"
V L "address" 3 46 "int8" `597 
F G "read_DS1307" 3 47 "int8(int8 address)" `596 
V L "data" 3 48 "int8" `598 
D G "bit3" 0 12 "PIN_A0"
D G "bit2" 0 13 "PIN_A1"
D G "bit1" 0 14 "PIN_A2"
D G "on_time" 0 15 "PIN_A3"
D G "on_mode" 0 16 "PIN_A4"
D G "button_set" 0 17 "PIN_B2"
D G "button_plus" 0 18 "PIN_B3"
D G "bit5" 0 19 "PIN_B6"
D G "bit4" 0 20 "PIN_B7"
D G "bit6" 0 21 "PIN_B5"
V G "t_real" 0 25 "int8[1]" `599 
C L "read_time" 0 23 2 "FUNCTION"
F G "read_time" 0 30 "void()" `600 
C L "read_time" 0 23 1 "FUNCTION"
C L "read_time" 0 23 1 "FUNCTION"
C L "read_time" 0 23 1 "FUNCTION"
C L "set_time" 0 23 1 "FUNCTION"
F G "set_time" 0 38 "void()" `601 
C L "set_time" 0 23 1 "FUNCTION"
C L "set_time" 0 23 1 "FUNCTION"
C L "set_time" 0 23 1 "FUNCTION"
C L "set_time" 0 23 1 "FUNCTION"
C L "set_time" 0 23 1 "FUNCTION"
C L "set_time" 0 23 1 "FUNCTION"
F G "reset_time" 0 50 "void()" `602 
C L "reset_time" 0 23 1 "FUNCTION"
C L "reset_time" 0 23 1 "FUNCTION"
C L "reset_time" 0 23 1 "FUNCTION"
C L "reset_time" 0 23 1 "FUNCTION"
C L "reset_time" 0 23 1 "FUNCTION"
C L "reset_time" 0 23 1 "FUNCTION"
C L "show" 0 23 2 "FUNCTION"
V L "n" 0 62 "int8" `604 
F G "show" 0 62 "void(int8 n)" `603 
C L "clear" 0 23 1 "FUNCTION"
F G "clear" 0 91 "void()" `605 
C L "show_time" 0 23 1 "FUNCTION"
V L "n" 0 105 "int8" `607 
F G "show_time" 0 105 "void(int8 n)" `606 
C L "blink" 0 23 1 "FUNCTION"
F G "blink" 0 112 "void()" `608 
V L "x" 0 113 "int8" `609 
C L "MAIN" 0 23 1 "FUNCTION"
F G "MAIN" 0 124 "void()" `610 
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 8 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
C L "MAIN" 0 23 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
