CCS PCM C Compiler, Version 4.093, 5967               05-lis-19 14:31

               Filename: Z:\home\mfilipiak\Dropbox\Projekty\elektronika\zegar_binarny\uC\demo\uC.lst

               ROM used: 199 words (19%)
                         Largest free fragment is 825
               RAM used: 9 (13%) at main() level
                         12 (18%) worst case
               Stack:    2 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0A6
0003:  NOP
.................... #include <16F84A.h> 
.................... //////// Standard Header file for the PIC16F84A device //////////////// 
.................... #device PIC16F84A 
.................... #list 
....................  
....................  
.................... //#use delay(internal=4MHz) 
.................... #use delay(clock=4MHz) 
0004:  MOVLW  17
0005:  MOVWF  04
0006:  MOVF   00,W
0007:  BTFSC  03.2
0008:  GOTO   017
0009:  MOVLW  01
000A:  MOVWF  0D
000B:  CLRF   0C
000C:  DECFSZ 0C,F
000D:  GOTO   00C
000E:  DECFSZ 0D,F
000F:  GOTO   00B
0010:  MOVLW  4A
0011:  MOVWF  0C
0012:  DECFSZ 0C,F
0013:  GOTO   012
0014:  GOTO   015
0015:  DECFSZ 00,F
0016:  GOTO   009
0017:  RETLW  00
....................  
.................... #fuses XT, NOWDT, NOPROTECT //Fuse dla pic16f87 
....................  
....................  
.................... #include "conversion.c" 
.................... // Convert normal decimal numbers to binary coded decimal 
.................... byte decToBcd(byte val) 
.................... { 
....................   return ( (val/10*16) + (val%10) ); 
.................... } 
....................  
.................... // Convert binary coded decimal to normal decimal numbers 
.................... byte bcdToDec(byte val) 
.................... { 
....................   return ( (val/16*10) + (val%16) ); 
.................... } 
....................  
.................... #include "ds1307.c" 
.................... /* 
.................... ZEGAR CZASU RZECZYWISTEGO  
....................   DS1307 
.................... */   
....................  
.................... #define DS1307_SDA  PIN_B1 
.................... #define DS1307_SCL  PIN_B4 
....................  
.................... #use i2c(master, sda=DS1307_SDA, scl=DS1307_SCL) 
....................  
.................... //========================== 
.................... // initial DS1307 
.................... //========================== 
.................... void init_DS1307() 
.................... { 
....................    output_float(DS1307_SCL); 
....................    output_float(DS1307_SDA); 
.................... } 
.................... //========================== 
.................... // write data one byte to 
.................... // DS1307 
.................... //========================== 
.................... void write_DS1307(byte address, BYTE data) 
.................... { 
....................    short int status; 
....................    char x; 
....................    i2c_start(); 
....................    i2c_write(0xd0); 
....................    i2c_write(address); 
....................    i2c_write(data); 
....................    i2c_stop(); 
....................    i2c_start(); 
....................    status=i2c_write(0xd0); 
....................    x = 0xd0; 
....................    while(status==1 || x<5) 
....................    { 
....................       i2c_start(); 
....................       status=i2c_write(0xd0); 
....................       x++; 
....................       delay_ms(20); 
....................    } 
.................... } 
.................... //========================== 
.................... // read data one byte from DS1307 
.................... //========================== 
.................... BYTE read_DS1307(byte address) 
.................... { 
....................    BYTE data; 
....................    i2c_start(); 
....................    i2c_write(0xd0); 
....................    i2c_write(address); 
....................    i2c_start(); 
....................    i2c_write(0xd1); 
....................    data=i2c_read(0); 
....................    i2c_stop(); 
....................    return(data); 
.................... } 
....................  
....................  
.................... #define bit3          PIN_A0 
.................... #define bit2          PIN_A1 
.................... #define bit1          PIN_A2 
.................... #define on_time       PIN_A3 
.................... #define on_mode       PIN_A4 
.................... #define button_set    PIN_B2 
.................... #define button_plus   PIN_B3 
.................... #define bit5          PIN_B6 
.................... #define bit4          PIN_B7 
.................... #define bit6          PIN_B5 
....................  
.................... //------------- ZMIENNE ----------- 
.................... //czas biezacy {h,m, s} 
.................... byte t_real[] = {0, 0, 0}; 
*
00A9:  CLRF   11
00AA:  CLRF   12
00AB:  CLRF   13
....................  
.................... //------------- FUNKCJE ----------- 
.................... //czytanie zegara 
....................  
.................... //======wyswietlacz============ 
.................... //ustawienie danych do wyswietlenia 
.................... void show(byte n){ 
....................  delay_ms(2); 
*
0044:  MOVLW  02
0045:  MOVWF  17
0046:  CALL   004
....................  if (n & 1) Output_high(bit1); 
0047:  BTFSS  16.0
0048:  GOTO   04E
0049:  BSF    03.5
004A:  BCF    05.2
004B:  BCF    03.5
004C:  BSF    05.2
....................  else Output_low(bit1); 
004D:  GOTO   052
004E:  BSF    03.5
004F:  BCF    05.2
0050:  BCF    03.5
0051:  BCF    05.2
....................  delay_ms(2); 
0052:  MOVLW  02
0053:  MOVWF  17
0054:  CALL   004
....................  n >>= 1; 
0055:  BCF    03.0
0056:  RRF    16,F
....................  if (n & 1) Output_high(bit2); 
0057:  BTFSS  16.0
0058:  GOTO   05E
0059:  BSF    03.5
005A:  BCF    05.1
005B:  BCF    03.5
005C:  BSF    05.1
....................  else Output_low(bit2); 
005D:  GOTO   062
005E:  BSF    03.5
005F:  BCF    05.1
0060:  BCF    03.5
0061:  BCF    05.1
....................  delay_ms(2); 
0062:  MOVLW  02
0063:  MOVWF  17
0064:  CALL   004
....................  n >>= 1; 
0065:  BCF    03.0
0066:  RRF    16,F
....................  if (n & 1) Output_high(bit3); 
0067:  BTFSS  16.0
0068:  GOTO   06E
0069:  BSF    03.5
006A:  BCF    05.0
006B:  BCF    03.5
006C:  BSF    05.0
....................  else Output_low(bit3); 
006D:  GOTO   072
006E:  BSF    03.5
006F:  BCF    05.0
0070:  BCF    03.5
0071:  BCF    05.0
....................  delay_ms(2); 
0072:  MOVLW  02
0073:  MOVWF  17
0074:  CALL   004
....................  n >>= 1; 
0075:  BCF    03.0
0076:  RRF    16,F
....................  if (n & 1) Output_high(bit4); 
0077:  BTFSS  16.0
0078:  GOTO   07E
0079:  BSF    03.5
007A:  BCF    06.7
007B:  BCF    03.5
007C:  BSF    06.7
....................  else Output_low(bit4); 
007D:  GOTO   082
007E:  BSF    03.5
007F:  BCF    06.7
0080:  BCF    03.5
0081:  BCF    06.7
....................  delay_ms(2); 
0082:  MOVLW  02
0083:  MOVWF  17
0084:  CALL   004
....................  n >>= 1; 
0085:  BCF    03.0
0086:  RRF    16,F
....................  if (n & 1) Output_high(bit5); 
0087:  BTFSS  16.0
0088:  GOTO   08E
0089:  BSF    03.5
008A:  BCF    06.6
008B:  BCF    03.5
008C:  BSF    06.6
....................  else Output_low(bit5); 
008D:  GOTO   092
008E:  BSF    03.5
008F:  BCF    06.6
0090:  BCF    03.5
0091:  BCF    06.6
....................  delay_ms(2); 
0092:  MOVLW  02
0093:  MOVWF  17
0094:  CALL   004
....................  n >>= 1; 
0095:  BCF    03.0
0096:  RRF    16,F
....................  if (n & 1) Output_high(bit6); 
0097:  BTFSS  16.0
0098:  GOTO   09E
0099:  BSF    03.5
009A:  BCF    06.5
009B:  BCF    03.5
009C:  BSF    06.5
....................  else Output_low(bit6); 
009D:  GOTO   0A2
009E:  BSF    03.5
009F:  BCF    06.5
00A0:  BCF    03.5
00A1:  BCF    06.5
....................  delay_ms(2); 
00A2:  MOVLW  02
00A3:  MOVWF  17
00A4:  CALL   004
.................... } 
....................  
....................  
.................... //ustawienie danych do wyswietlenia 
.................... void clear(){ 
....................  delay_ms(10); 
*
0018:  MOVLW  0A
0019:  MOVWF  17
001A:  CALL   004
....................  Output_low(on_mode); 
001B:  BSF    03.5
001C:  BCF    05.4
001D:  BCF    03.5
001E:  BCF    05.4
....................  Output_low(on_time); 
001F:  BSF    03.5
0020:  BCF    05.3
0021:  BCF    03.5
0022:  BCF    05.3
....................  Output_low(bit1); 
0023:  BSF    03.5
0024:  BCF    05.2
0025:  BCF    03.5
0026:  BCF    05.2
....................  Output_low(bit2); 
0027:  BSF    03.5
0028:  BCF    05.1
0029:  BCF    03.5
002A:  BCF    05.1
....................  Output_low(bit3); 
002B:  BSF    03.5
002C:  BCF    05.0
002D:  BCF    03.5
002E:  BCF    05.0
....................  Output_low(bit4); 
002F:  BSF    03.5
0030:  BCF    06.7
0031:  BCF    03.5
0032:  BCF    06.7
....................  Output_low(bit5); 
0033:  BSF    03.5
0034:  BCF    06.6
0035:  BCF    03.5
0036:  BCF    06.6
....................  Output_low(bit6); 
0037:  BSF    03.5
0038:  BCF    06.5
0039:  BCF    03.5
003A:  BCF    06.5
....................  delay_ms(10); 
003B:  MOVLW  0A
003C:  MOVWF  17
003D:  CALL   004
.................... } 
....................  
.................... //wyswietlenie czasu 
.................... void show_time(byte n){ 
....................         clear(); 
....................         Output_high(on_time); 
003E:  BSF    03.5
003F:  BCF    05.3
0040:  BCF    03.5
0041:  BSF    05.3
....................         show(n); 
0042:  MOVF   15,W
0043:  MOVWF  16
.................... } 
*
00A5:  GOTO   0C3 (RETURN)
....................  
.................... //zamrugaj diodami 
.................... void blink(){ 
....................         int8 x; 
....................         for(x=0;x<10;x++){ 
....................                        clear(); 
....................                        delay_ms(50); 
....................                        Output_high(on_mode); 
....................                        show(5);     
....................                        delay_ms(50); 
....................          } 
.................... }                 
....................  
.................... //---------------MAIN-------------- 
.................... void main() 
.................... { 
00A6:  CLRF   04
00A7:  MOVLW  1F
00A8:  ANDWF  03,F
....................  
....................    delay_ms(1000); 
*
00AC:  MOVLW  04
00AD:  MOVWF  15
00AE:  MOVLW  FA
00AF:  MOVWF  17
00B0:  CALL   004
00B1:  DECFSZ 15,F
00B2:  GOTO   0AE
....................  
....................   
....................    //petla glowna 
....................    while(1==1){ 
....................     
....................      
....................         
....................       int8 c; 
....................       for (c=1;c<60;c++){ 
00B3:  MOVLW  01
00B4:  MOVWF  14
00B5:  MOVF   14,W
00B6:  SUBLW  3B
00B7:  BTFSS  03.0
00B8:  GOTO   0C5
....................          delay_ms(1000);  
00B9:  MOVLW  04
00BA:  MOVWF  15
00BB:  MOVLW  FA
00BC:  MOVWF  17
00BD:  CALL   004
00BE:  DECFSZ 15,F
00BF:  GOTO   0BB
....................          show_time(c); 
00C0:  MOVF   14,W
00C1:  MOVWF  15
00C2:  GOTO   018
....................       } 
00C3:  INCF   14,F
00C4:  GOTO   0B5
....................  
....................    } 
00C5:  GOTO   0B3
.................... } 
00C6:  SLEEP

Configuration Fuses:
   Word  1: 3FF1   XT NOWDT PUT NOPROTECT
